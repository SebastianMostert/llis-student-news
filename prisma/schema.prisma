// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid()) @map("_id")
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  roles         Role[]
  sessions      Session[]
  Post          Post[]
  Comment       Comment[]
  Likes         Like[]
  Dislikes      Dislike[]
  Report        Report[]
  Authenticator Authenticator[]
}

model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id       String  @id @default(cuid()) @map("_id")
  slug     String  @unique
  title    String
  img      String?
  hexColor String?
  Posts    Post[]
}

model Post {
  id          String    @id @default(cuid()) @map("_id")
  createdAt   DateTime  @default(now())
  slug        String    @unique
  title       String
  desc        String
  img         String?
  featured    Boolean   @default(false)
  editorsPick Boolean   @default(false)
  views       Int       @default(0)
  catSlug     String
  cat         Category  @relation(fields: [catSlug], references: [slug])
  userEmail   String
  user        User      @relation(fields: [userEmail], references: [email])
  comments    Comment[]
}

model Comment {
  id        String    @id @default(cuid()) @map("_id")
  createdAt DateTime  @default(now())
  desc      String
  userEmail String
  user      User      @relation(fields: [userEmail], references: [email])
  postSlug  String
  post      Post      @relation(fields: [postSlug], references: [slug])
  Like      Like[]
  Dislike   Dislike[]
  Report    Report[]
}

model Like {
  id        String  @id @default(cuid()) @map("_id")
  userEmail String
  user      User    @relation(fields: [userEmail], references: [email])
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Dislike {
  id        String  @id @default(cuid()) @map("_id")
  userEmail String
  user      User    @relation(fields: [userEmail], references: [email])
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Report {
  id            String   @id @default(cuid()) @map("_id")
  commentId     String
  comment       Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userEmail     String
  user          User     @relation(fields: [userEmail], references: [email])
  reportOptions String[]
}

model Role {
  id              String           @id @default(cuid()) @map("_id")
  name            String           @unique
  desc            String
  rolePermissions RolePermission[]
  User            User?            @relation(fields: [userId], references: [id])
  userId          String?
}

model Permission {
  id              String           @id @default(cuid()) @map("_id")
  name            String
  desc            String
  rolePermissions RolePermission[]
}

model RolePermission {
  id           String     @id @default(cuid()) @map("_id")
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@index([roleId, permissionId], name: "role_permission_unique_index")
}
