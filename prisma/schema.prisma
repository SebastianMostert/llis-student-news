// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                     String          @id @default(auto()) @map("_id") @db.ObjectId
  firstName              String          @default("Anonymous")
  lastName               String?
  email                  String          @unique
  emailVerified          DateTime?
  subscribedToNewsletter Boolean         @default(false)
  Posts                  Post[]
  image                  String?
  accounts               Account[]
  sessions               Session[]
  // Optional for WebAuthn support
  Authenticator          Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  NewsletterSubscriber NewsletterSubscriber[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  slug       String   @unique
  content    String
  image      Image?   @relation(fields: [imageId], references: [id])
  imageId    String?  @db.ObjectId
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String   @db.ObjectId
  createdAt  DateTime @default(now())
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.ObjectId
}

model Category {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  slug  String
  posts Post[]
}

model EmailVerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model NewsletterSubscriber {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  email  String  @unique
  userId String? @db.ObjectId // Optional link to a User

  isVerified Boolean @default(false) // Whether the email is verified

  subscribedAt   DateTime? // When the subscription occurred
  unsubscribedAt DateTime? // Optional field for tracking unsubscriptions

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation to User
}

model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String // Name of the image file
  mimeType  String // The MIME type of the image (e.g., "image/png")
  size      Int // The size of the image in bytes
  content   Bytes // The binary content of the image
  createdAt DateTime @default(now())
  Post      Post[]
}
